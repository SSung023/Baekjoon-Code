#include <iostream>
#include <cmath>
#include <vector>
#include <stack>
#include <string>
#include <algorithm>

using namespace std;

int arr[15];
int cnt = 0, n = 0;


bool isVaild(int idx) {

    // 같은 열, 대각선이 다른 queen의 영향력인지 확인
    for (int i = 0; i < idx; i++) {
        // 같은 열일 때 || 행 번호 차이 == 열 번호 차이
        if (arr[idx] == arr[i] || idx - i == abs(arr[idx] - arr[i])) {
            return false;
        }
    }
    return true;
}

void dfs(int idx){
    //base case : 행의 갯수만큼 진행했다면 n개의 queen을 배치한 것
    if(idx == n){
        cnt++;
        return;
    }

    for(int i = 0; i < n; i++)
    {
        arr[idx] = i; // [idx][i]에 queen 배치

        if(isVaild(idx)){ // 해당 칸에 queen 배치가 가능하다면
            dfs(idx + 1); // 다음 행에 queen 배치 시도
        }
    }

}

int main() {
    // cin,cout 속도향상
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n;
    dfs(0);
    cout << cnt;

    //알고리즘 - back tracking(DFS)
    //arr[0] = 1의 의미: [0][1]에 퀸을 놓는다

    return 0;
}

